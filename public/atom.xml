<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lite]]></title>
  <link href="http://lite.github.com/atom.xml" rel="self"/>
  <link href="http://lite.github.com/"/>
  <updated>2014-08-21T23:25:19+08:00</updated>
  <id>http://lite.github.com/</id>
  <author>
    <name><![CDATA[Lite]]></name>
    <email><![CDATA[litekok@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[乐高教育]]></title>
    <link href="http://lite.github.com/blog/2014/08/21/lego-vision/"/>
    <updated>2014-08-21T21:30:00+08:00</updated>
    <id>http://lite.github.com/blog/2014/08/21/lego-vision</id>
    <content type="html"><![CDATA[<p><a href="http://education.lego.com/en-us/about-us/lego-education-worldwide/vision-and-values">乐高教育</a></p>

<h1>愿景</h1>

<p>当玩转变为学习的方式时，为课堂带来最具创新性的解决方案。通过最好的工具，提供动手创造的体验，老师和学生能体会到高效，参与性强和更有动力的学习新方式。</p>

<h1>使命</h1>

<p>激发和培养未来世界的建设者，帮助教育者使学生获得成功。人们期望老师们提供某些学习成果和可衡量结果，努力满足这些需求。</p>

<h1>价值</h1>

<p>丰富想象力，快乐，创新，学习，关怀和品质。带给教育者明确的学习价值。
学习一定是：
+ 参与, 保证每个学生有效参与学习过程。促进终身的好奇心和主动学习。
+ 相关, 设计的目的是让学生为生活做好准备，学习现实生活中应用到的核心学科知识，同时开发生活技能，如沟通，协作和创造性解决问题。
+ 动手, 通过制作，加工和创造东西来学习，意味着学生掌握主动权，成为学习过程的主动者。
+ 创意, 使学生进行创造性思考和逻辑推理。</p>

<h1>品牌承诺</h1>

<p>如果上面的都实现，承诺为教育者提供一个激动人心的教学方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识建构]]></title>
    <link href="http://lite.github.com/blog/2014/08/07/knowledge-building/"/>
    <updated>2014-08-07T15:45:00+08:00</updated>
    <id>http://lite.github.com/blog/2014/08/07/knowledge-building</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_62881fbe0100qn5l.html">知识建构理论的核心——12项基本原则</a></p>

<p>知识建构理论与通常我们熟知的建构主义学习理论存在两个方面的差异。其一是目标的差异，一般的建构主义理论强调学生是认知主体、是意义的主动建构者，所以是把学生对知识的意义建构作为整个学习过程的最终目的；而知识建构理论则把观点和公共知识的持续发展放在核心位置，学生个体的意义建构被看作知识建构的副产品。其二是教学关系方面的差异，浅层建构主义的教学中，教师承担了定义目标、设定任务、设计活动和监控进度等职责，学生只需参与活动和完成任务；而在知识建构中，学生需要承担“协同的认知任务（collective cognitive responsibility）”，需要自己完成定义问题、确立目标、搜集信息、提出观点、监控和反思等工作。</p>

<h2>关于观点</h2>

<ul>
<li>原则1、真实的观点、现实的问题</li>
<li>原则2、 多样化的观点</li>
<li>原则3、持续改进的观点</li>
<li>原则4、观点的概括和升华</li>
</ul>


<h2>关于社区</h2>

<ul>
<li>原则5、学生是积极的认知者</li>
<li>原则6、社区知识与协同认知责任</li>
<li>原则 7、“民主化”的知识</li>
<li>原则8、对等的知识发展</li>
<li>原则9、 无处不在的知识建构</li>
</ul>


<h2>关于手段</h2>

<ul>
<li>原则10、知识建构对话</li>
<li>原则11、权威资料的建构性使用</li>
<li>原则12、嵌入活动的形成性评价</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[皮亚杰点滴]]></title>
    <link href="http://lite.github.com/blog/2014/07/29/piage/"/>
    <updated>2014-07-29T19:48:00+08:00</updated>
    <id>http://lite.github.com/blog/2014/07/29/piage</id>
    <content type="html"><![CDATA[<p>皮亚杰心理学的理论核心是“发生认识论”。主要研究人类的认识（认知、智力、思维、心理的发生和结构）。他认为，人类的知识不管多么高深、复杂；都可以追溯到人的童年时期。甚至可以追溯到胚胎时期。儿童出生以后，认识是怎样形成的，智力思维是怎样发展的，它是受哪些因素所制约的，它的内在结构是什么，各种不同水平的智力、思维结构是如何先后出现的，等等</p>

<h1>概念</h1>

<p>图式(scheme)、同化(assimilation)、顺化（accommodation）和平衡（equilibration）。</p>

<p>个体每当遇到新的刺激总是试图用原有图式去同化，若获得成功，便能得到暂时的平衡，如果原有图式无法同化环境刺激，个体便会作出顺化，即调节原有图式或重新建立新图式，直至达到认识上的新平衡。</p>

<h1>产品</h1>

<p>西摩尔·派普特就是根据皮亚杰的理论而开发了可让儿童学习使用电脑的Logo编程语言。Alan Kay以皮亚杰的理论为基础，开发了Dynabook编程概念。以上这两项技术，都是现今我们日常使用的图形使用者接口（GUI）的基础技术，使电脑从文字界面过渡至图形界面，改写了电脑技术的发展路向。</p>

<h1>游戏</h1>

<p>皮亚杰提出了三种类型的游戏:练习性游戏，象征性游戏和有规则的竞赛游戏，它们分别与认知发展的感知运动阶段、前运算阶段和具体运算阶段相对应。</p>

<p>练习性游戏，假装性游戏和有规则的竞赛游戏之间有着什么样的关系呢?对此，皮亚杰曾有一段精辟的论述，他说:“正如一旦思维出现了，符号就取代了行动。一旦形成了社会关系，规则也就取代了符号，并且把行动统一起来”。</p>

<h2>练习性游戏</h2>

<p>练习性游戏所以能产生乐趣，在于儿童感觉到他能控制自身，控制环境。在游戏中，有关的技巧是难于掌握的，有关的问题也是难于解决的。但一旦掌握了技巧，解决了问题，当事实证明儿童能反复控制自身和环境时，儿童便沉溺于自己的能力、信心都在增长的感觉之中。最初的学习是适应性行为，但随后的练习都是游戏，游戏的作用在于巩固最新的学习。例如，儿童能以多种方式滑下一个滑梯，而不致在身体下滑时大大地改变身体与滑梯的物理关系和空间关系。儿童滑滑梯时，身体可以摇摆，脚踢滑梯或众手挥舞，也可以坐在、躺在甚至站在滑梯上，头在前或脚在前下滑。这些不同的行为表明，身体与滑梯之间的一套核心的物理空间关系在本质不变的情况下形式可以有所改变。皮亚杰认为，这种行为与儿童当初学会滑滑梯时所表现出来的注意与集中的尝试性行为是不同的。在他看来，最初的学习是适应性行为，但随后的练习都是游戏，游戏的作用在于巩固最新的学习。</p>

<h2>象征性游戏</h2>

<p>象征性游戏是儿童游戏的高峰，它反映了符号机能的出现和发展。所谓符号，就是说，认识到一个事物(能指)能代表另外一个事物(所指)。象征性活动有两个特征，第一，象征性活动是从儿童习得、运用和练习这种活动的实际情境中分离出来的;第二，象征性活动虽然是与原来的情境分开了并且变得不同了，但儿童仍然认为它们属于原来的情境。此外，象征性活动所具有的意义是由儿童对其作出的个体的、人各不同的和自我中心的解释来提供的。因此，象征(游戏象征)具有一种认知的内核和一种情感的投影。象征性游戏还可能是儿童对其他事物延迟摹仿的结果，在游戏中，儿童再现的行为并不反映他们的直接经验，但却被赋予了一种适合于儿童理解(同化)的意义。儿童假扮父亲睡觉或者让玩具娃娃睡觉等象征性游戏表示一种“大规模”的动作联合，它象征着或意味着儿童对睡眠人物和人际关系的意义已经有了比较丰富而精确的认识。不仅如此，作为同化作用的产物，这些意义在任何时候都包含有超出睡眠的纯粹认识意义的情感、愿望和记忆。</p>

<h2>有规则的竞赛游戏</h2>

<p>  有规则的竞赛游戏是在象征性游戏之后出现的，这种游戏表现出一种定向于现实的同化作用.游戏的规则来自集体对娱乐活动的组织，从而带有一种社会责任感。竞赛规则的复杂性反映了玩游戏的儿童的智力水平和认知能力，也就是说，如果儿童的智力达不到一定的水平，他们是无法理解并遵守竟赛规则，更谈不上共同订立规则了.也许更重要的是，在有规则的竞赛游戏中体现出来的社会性行为的规范化反映了儿童参与有规则的或由规则支配的社会关系能力，同时，也为儿童积极的交往提供了良好的基础。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关闭Mac深度睡眠]]></title>
    <link href="http://lite.github.com/blog/2014/05/21/pmset-hibernatemode/"/>
    <updated>2014-05-21T19:08:00+08:00</updated>
    <id>http://lite.github.com/blog/2014/05/21/pmset-hibernatemode</id>
    <content type="html"><![CDATA[<p>关闭深度睡眠，当mac没电时候，系统会自动进入深度休眠，把内存放到硬盘上相同大小的空间中，很少用到也占用硬盘空间。</p>

<p>查看深度休眠模式，3表示有深度休眠</p>

<pre>
sudo pmset -g | grep hibernatemode
</pre>


<p>关闭深度休眠</p>

<pre>
sudo pmset -a hibernatemode 0
</pre>


<p>删除深度休眠创建的内存映像文件：</p>

<pre>
sudo rm /var/vm/sleepimage
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rebar工具]]></title>
    <link href="http://lite.github.com/blog/2014/03/06/rebar-usage/"/>
    <updated>2014-03-06T18:01:00+08:00</updated>
    <id>http://lite.github.com/blog/2014/03/06/rebar-usage</id>
    <content type="html"><![CDATA[<h1>创建服务器</h1>

<pre>
rebar create-app appid=lyapp
rebar compile
rebar clean
rebar create template=simplesrv srvid=lyapp_server
</pre>


<h1>测试</h1>

<pre>
rebar compile eunit
</pre>


<p>lyapp_test.hrl内容</p>

<p></pre>
-include_lib(&#8220;eunit/include/eunit.hrl&#8221;).
my_test() -></p>

<pre><code>?assert(1 + 1 =:= 2).
</code></pre>

<p></pre></p>

<h1>发行</h1>

<pre>
rebar create-node nodeid=lyapp
</pre>


<p>rebar.config内容</p>

<pre>
{sub_dirs, ["rel"]}.
</pre>


<h1>编译运行</h1>

<pre>
rebar compile
rebar generate
rel/lyapp/bin/lyapp start
rel/lyapp/bin/lyapp stop 
rel/lyapp/bin/lyapp console
> application:which_applications().
> release_handler:which_releases().
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[游戏设计]]></title>
    <link href="http://lite.github.com/blog/2014/01/23/game-design/"/>
    <updated>2014-01-23T18:09:00+08:00</updated>
    <id>http://lite.github.com/blog/2014/01/23/game-design</id>
    <content type="html"><![CDATA[<p>Core Loop Design: Object, Challenge， Reward</p>

<p>Session Design: short and longer</p>

<p>UX: Made for Touch</p>

<p>Wow</p>

<p>Progression planning</p>

<pre><code>* Basic Check-List
* First session progression
* Screenshot after first session 
* 1 week objective defining
* The 6 month player “art test”
* The “tile test” calculation
* Complexity progression
* Balancing, balancing, balancing
</code></pre>

<p>Unlock Features Progressively</p>

<pre><code>* Un-lock new features or resources at 3 days, 1 week, 1 month, 2 months of play
* Don’t have new players overwhelmed
* High-level players bulk of revenue, the new stuff will increase their retention
</code></pre>

<p>Monetization and LTV: Not Pay to win!</p>

<p>Real Social Patterns</p>

<pre><code>* PvP, Co-opUGC
* Trading
* Chatting
* Forming Alliances
* Sending resources
* Helping newbies
</code></pre>

<p>Events</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DELL edge 网络配置]]></title>
    <link href="http://lite.github.com/blog/2013/12/04/dell-edge-networking/"/>
    <updated>2013-12-04T12:05:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/12/04/dell-edge-networking</id>
    <content type="html"><![CDATA[<p>修改 /etc/sysconfig/network-scripts/ifcfg-em1</p>

<pre>
ONBOOT=yes  #no
</pre>


<p>重启服务</p>

<pre>
service network restart
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[删除文件未释放空间]]></title>
    <link href="http://lite.github.com/blog/2013/11/14/deleted-file/"/>
    <updated>2013-11-14T11:14:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/11/14/deleted-file</id>
    <content type="html"><![CDATA[<p>删除了文件，但磁盘没有释放。
pid是30439，fd是1w。</p>

<pre>
lsof | grep deleted
java      30439 root    1w      REG              202,1 3522641920     360788 /root/nohup.out (deleted)
</pre>


<p>清除该文件</p>

<pre>
echo "" > /proc/30439/fd/1
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git使用技巧]]></title>
    <link href="http://lite.github.com/blog/2013/10/28/rename-branch-and-resolve-conflict/"/>
    <updated>2013-10-28T00:03:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/10/28/rename-branch-and-resolve-conflict</id>
    <content type="html"><![CDATA[<ul>
<li>重命名远程分支</li>
</ul>


<pre>
git branch -m old_branch new_branch
git push origin :old_branch
git push origin new_branch
</pre>


<ul>
<li>解决冲突</li>
</ul>


<pre>
git checkout --ours .
git checkout --theirs .
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins 和 Gradle]]></title>
    <link href="http://lite.github.com/blog/2013/10/09/jenkins-and-gradle/"/>
    <updated>2013-10-09T01:08:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/10/09/jenkins-and-gradle</id>
    <content type="html"><![CDATA[<p>安装 jenkins</p>

<pre>
sudo zypper addrepo http://pkg.jenkins-ci.org/opensuse/ jenkins
sudo zypper install jenkins
</pre>


<p>&#8220;Manage Jenkins&#8221;, &#8220;Manage Plugins&#8221;</p>

<p>&#8220;Advanced&#8221;, &#8220;Update Site&#8221;,</p>

<p>Url 是 http://mirror.xmission.com/jenkins/updates/update-center.json</p>

<p>安装 &#8220;Gradle Plugin&#8221;,  &#8220;Git Plugin&#8221;, &#8220;Post build task&#8221;,</p>

<p>安装 gradle 1.8 /var/lib/jenkins/tools/hudson.plugins.gradle.GradleInstallation/gradle-1.8</p>

<p>&#8220;New job&#8221;</p>

<p>&#8220;Source Code Management&#8221;,</p>

<p>&#8220;git repo&#8221; 是 git@host:test.git,</p>

<p>&#8220;Branches to build&#8221; 是 origin/develop.</p>

<p>&#8220;Build&#8221;, &#8220;Invoke Gradle script&#8221;, &#8220;Task&#8221; 是 build 和 deploy</p>

<pre>
// /var/lib/jenkins/jobs/test/workspace/build.gradle
sourceCompatibility = 1.6
version = 1.0

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }

    dependencies {
        compile(
            'com.google.guava:guava:13.0.1',
            'log4j:log4j:1.2.17',
            // fileTree(dir: "${rootProject.projectDir}/lib", include: '*.jar')
        )
        testCompile(
            'junit:junit:4.10',
            'org.mockito:mockito-all:1.9.0',
        )
    }
}

project(':Server') {
    jar {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(
it) } }
        manifest { attributes 'Main-Class': 'main.java.StartServer' }
    }
    dependencies {
        compile(
            project(':ServerUtil'),
            files(
                '../Lib/jdom.jar',
            )

        )
    }
}

def jarProjects() {
    subprojects.findAll { project -> project.name != 'ServerUtil'}
}

task deploy(description: 'Copies the artifacts') {
    ext {
        distDir = file("dist")
    }
    doLast {
     jarProjects().each { project ->
            def jarDist = project.file("${distDir}/${project.name}")
            def confDist = project.file("${distDir}/${project.name}/config")
            def confDir = project.file("config")
            def jarDir = project.file("${project.buildDir}/libs")
            copy {
                from jarDir
                into jarDist
                include "*.jar"
            }
            copy{
                from confDir
                into confDist
            }
        }
    }
}
</pre>


<p>Post-build Actions</p>

<pre>
/bin/bash start.sh
</pre>




<pre>
# //var/lib/jenkins/jobs/test/workspace/start.sh
kill -9 `lsof -t -i :8081`
nohup java -jar Server.jar &
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下载JDK]]></title>
    <link href="http://lite.github.com/blog/2013/09/29/wget-jdk-with-cookie/"/>
    <updated>2013-09-29T10:54:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/09/29/wget-jdk-with-cookie</id>
    <content type="html"><![CDATA[<p>&#8220;In order to download products from Oracle Technology Network you must agree to the OTN license terms&#8221;</p>

<p>避免需证书下载的Cookie:</p>

<pre>
Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F
</pre>


<ul>
<li>下载JDK7</li>
</ul>


<pre>
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F" http://download.oracle.com/otn-pub/java/jdk/7u25-b15/jdk-7u25-macosx-x64.dmg
</pre>


<ul>
<li>下载JDK6</li>
</ul>


<pre>
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F" http://download.oracle.com/otn-pub/java/jdk/6u45-b06/jdk-6u45-linux-i586-rpm.bin
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TexturePacker和Unity3D插件Tang]]></title>
    <link href="http://lite.github.com/blog/2013/08/23/texturepacker-and-tang-in-unity3d/"/>
    <updated>2013-08-23T23:13:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/08/23/texturepacker-and-tang-in-unity3d</id>
    <content type="html"><![CDATA[<p><a href="http://www.codeandweb.com">Code&#8217;n&#8217;Web</a>慷慨地赠送了一个license, 为了表示感谢，在此做强烈推荐。</p>

<p>TexturePacker是手机游戏开发中非常得力的工具,可以非常方便的把许多的图像资源合成一张大图,方便管理资源和提升性能,其中裁剪和旋转的功能非常实用。更详细请访问官方网站：<a href="http://www.codeandweb.com/texturepacker">TexturePacker</a></p>

<p>使用TexturePacker，可以在Unity3d加入自己的一些处理，让游戏的开发更加自动化。同事写了一个简单的Unity3D插件Tang。该插件参考了 <a href="http://u3d.as/content/wyrm-tale-games/orthello-2d-framework/1Z9">Orthello 2D Framework</a> 的部分做法，AtlasCocos2DParser类用于解析TexturePacker所生成的数据文件。其核心代码开放在 <a href="https://github.com/zhongzichang/tang">github</a>，欢迎大家试用，Fork或提交代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HCD社会创新工作坊]]></title>
    <link href="http://lite.github.com/blog/2013/07/26/hcd-workshop/"/>
    <updated>2013-07-26T00:54:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/07/26/hcd-workshop</id>
    <content type="html"><![CDATA[<p><a href="http://plusacumen.org/human-centered-design-for-social-innovation-course-materials/">Human-Centered Design for Social Innovation</a></p>

<p>选择一个挑战，Discover发散出大量信息，Ideate将信息分类聚合，发散出大量解决方案，Prototype聚合可行方案并制作原型。</p>

<h1>介绍</h1>

<ul>
<li>观察，发现社区的信息和要解决的问题，包括产品的资源及限制，人的感受和需求，系统节点等等。</li>
<li>构思，对各种信息的分析并设计解决方案，例如空间中人群如何交互，满足人的需求，系统中各节点的联系。</li>
<li>原型，快速建立原型，并持续改进。</li>
</ul>


<p>注：让每阶段的产出视觉化。</p>

<h1>观察</h1>

<ul>
<li>和社区中的人群面对面交流，观察情绪</li>
<li>询问专家，学习专业知识</li>
<li>深入场景，亲身感受</li>
<li>找到类似的场景，寻求灵感</li>
</ul>


<p>注：交流时请问开放式的问题。</p>

<h1>构思</h1>

<ul>
<li>分享“观察”中感人的故事和调查的信息。包括采访者的个人信息，有趣的故事，动机，遇到的阻碍，与环境的交互，以及下一次你会再问什么问题？其余队员在Post-it写下记忆最深刻的故事，构成被采访者的详细个人故事。</li>
<li>按主题分类。每人找5个最有趣的和深刻见解的故事作为重点，并从其余的Post-it里找出相关的证据，合并成3-5块, 并写上标题。</li>
<li>创建深刻见解的陈述，用简单的3条陈述解释主题为什么会是一个挑战，并和团队一起来为每个主题选出3条陈述。</li>
<li>创建HMW问题。选择最喜欢的3条陈述（每个主题1条），并把他们转换成HMW问题，和团队一起优化这些问题。</li>
<li>头脑风暴。头脑风暴的原则：先不要否定，鼓励疯狂的想法，在别人的想法上创造，不要跑离主题，轮流发言，可视化，数量越多越好。</li>
<li>选择最可行的想法。每人两票。一票选最有创意的，另一票是最可行的。</li>
</ul>


<h1>原型</h1>

<ul>
<li>为最棒的点子评分。根据excited, innovative和realistic，每项1-5分。</li>
<li>画出产品体验的不同阶段。比如用户如何获知该产品，开始购买，第一次使用，全家使用。</li>
<li>选择要设计的原型。写下每个体验阶段，需要回答的最重要问题以及如何测试。</li>
<li>开始原型设计。原型包括模型，mockup，角色扮演，diagram，story， 广告单。Be Creative，Have Fun，Design to get answer。</li>
<li>收集反馈。提供原型给用户，计划活动并收集反馈。反馈包括测试点，如第一印象, 参与情况，随时间变化的行为。活动形式可以为提供原型给用户，和用户对话并观察用户的真实行为。</li>
<li>原型迭代。对反馈做分类，评估相关性，排优先级，并对原型做迭代。</li>
</ul>


<h1>前进</h1>

<ul>
<li>迭代：解决其余问题。建立一个行动计划。查看前面的体验图来查看哪些问题已经有答案，而哪些仍然未知。列出要用的材料。计算需要的资金。标定合作者，并完成行动计划。</li>
<li>试验：小范围试用了解可行性。把想法带入市场去测试。画一个商业模式画布，目标顾客，价值主张，收入，渠道。决定什么需要测试，价格。顾客是否愿意付款，以及接受的付款方式，如预付费，分期还是订阅。团队是否同样期待产品的成功。客户留存，客户体验。选择一个启动计划，选择合伙人，建立初始团队，找到办公场所，设置开始的价格，建立品牌。</li>
<li>扩张：计划扩张策略。通过试验，产品对于客户是期望的，可行的，重要的，可以开始早期扩张，在这个阶段资本和资源都比较紧张，主要测试本地的合作伙伴，如果模式可行，进入特许经营，主要销售或授权给商户，他们付加盟费，使用你的品牌和想法，需要支持本地商户，可能会降低产品质量。最后是整合，集合企业，政府，公益组织来扩张你的产品，会支持本地商户或社区组织，依赖更多外部合作者的意愿和能力。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[六顶思考帽]]></title>
    <link href="http://lite.github.com/blog/2013/06/17/six-thinking-hats/"/>
    <updated>2013-06-17T00:02:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/06/17/six-thinking-hats</id>
    <content type="html"><![CDATA[<p>爱德华·德波诺提出了一些促进横向思维的方法</p>

<ul>
<li>对问题本身产生多种选择方案（类似于发散）；</li>
<li>打破定势，提出富有挑战性的假设；</li>
<li>对头脑中冒出的新主意不要急着做是非判断；</li>
<li>反向思考，用与已建立的模式完全相反的方式思维，以产生新的思想；</li>
<li>对他人的建议持开放态度，让一个人头脑中的主意刺激另一个人头脑里的东西，形成交叉刺激；</li>
<li>扩大接触面，寻求随机信息刺激，以获得有益的联想和启发（如到图书馆随便找本书翻翻；从事一些非专业工作等）等等。</li>
</ul>


<p>代表的思维方式</p>

<ul>
<li>红帽子代表感性直觉式的思维方式;以感觉与情绪做判断；【我感觉&#8230;】</li>
<li>白帽子代表中立客观式的思维方式;着重事实与资讯；【有什么情报或资讯？】</li>
<li>黄帽子代表乐观积极型的思维方式;事物的正面因素；【我们从中获得什么利益？】</li>
<li>黑帽子代表谨慎消极型的思维方式;着重事物的负面因素；【这是真的吗？】</li>
<li>绿帽子代表跳跃式创造性思维方式;代表创意性思考；【有什么其他不同的想法吗？】</li>
<li>蓝帽子代表冷静的逻辑性思维方式;冷静客观；【归纳的结论是&#8230;具体做法是&#8230;】</li>
</ul>


<p>两种使用方法</p>

<ul>
<li><p>平行思维法：</p>

<p>  每个人戴自己的帽子按照自己习惯进行头脑风暴，也可任何指派角色。头脑风暴发起人自己必须戴蓝帽子</p></li>
<li><p>转换思维法：</p>

<p>  每个人都戴红色（找商业机会），再换白色（搜集信息论证）；再黄色（分析利益）；再黑色（分析风险），再绿色（建设性方案），最后再蓝色（逻辑性综合判断）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodejs, C libevent 和 erlang]]></title>
    <link href="http://lite.github.com/blog/2013/05/16/erlang-kernel-poll/"/>
    <updated>2013-05-16T00:41:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/05/16/erlang-kernel-poll</id>
    <content type="html"><![CDATA[<p>nodejs &lt; libevent &lt; erlang</p>

<pre><code>node.js:  connect=10000,active connect=100,req=1378370,time=60,req/sec=22972.8,msec/req=4.35543
libevent: connect=10000,active connect=100,req=3719106,time=60,req/sec=61985.1,msec/req=1.61258
erlang:   connect=10000,active connect=100,req=6377574,time=60,req/sec=106293,msec/req=0.939882
</code></pre>

<h2>node_test.js</h2>

<pre><code>
    var net = require('net');
    var cnt = 0;
    var server = net.createServer(function (socket) {
      socket.pipe(socket);
    });

    server.listen(8000, "127.0.0.1");
</code></pre>


<h2>libevent_test.c</h2>

<pre><code>
    #include < stdlib.h>
    #include < unistd.h>
    #include < netinet/in.h>  
    #include < sys/socket.h>  
    #include < sys/types.h>  
    #include < sys/socket.h>
    #include < event.h>  
    #include < stdio.h>  
    #include < time.h> 
    #include < string.h>
    #include < fcntl.h>

    int buf_len = 2048;
    int msg_len = 1024; 
    int total = 0;

    int setnonblock(int fd)
    {       
        int flags;       
        flags = fcntl(fd, F_GETFL);       
        if (flags < 0)               
            return flags;       
        flags |= O_NONBLOCK;       
        if (fcntl(fd, F_SETFL, flags) < 0)               
            return -1;       
     
        return 0;
    }

    void connection_echo(int fd, short event, void *arg)
    {
        struct event *ev = (struct event *)arg;
        event_add(ev, NULL);

        char buf[buf_len];
        int read_len = read(fd, buf, msg_len);
        write(fd, buf, read_len);
    }

    void connection_accept(int fd, short event, void *arg)   
    { 
        /* for debugging */ 
        fprintf(stderr, "%s(): fd = %d, event = %d, total = %d.\n", __func__, fd, event, ++total);  

        /* Accept a new connection. */ 
        struct sockaddr_in s_in;  
        socklen_t len = sizeof(s_in);  
        int ns = accept(fd, (struct sockaddr *) &s_in, &len);  
        if (ns < 0) {  
            perror("accept");  
            return;  
        }  

        setnonblock(ns);

        /* Install echo server. */ 
        struct event *ev = (struct event *)malloc(sizeof(struct event));  
        event_set(ev, ns, EV_READ, connection_echo, ev);  
        event_add(ev, NULL);  
    } 

    int main(void)  
    {  
        /* Request socket. */ 
        int s = socket(PF_INET, SOCK_STREAM, 0);  
        if (s < 0) {  
            perror("socket");  
            exit(1);  
        }  

        /* bind() */ 
        struct sockaddr_in s_in;  
        memset(&s_in, 0, sizeof(s_in));  
        s_in.sin_family = AF_INET;  
        s_in.sin_port = htons(8000);  
        s_in.sin_addr.s_addr = INADDR_ANY;  
        if (bind(s, (struct sockaddr *) &s_in, sizeof(s_in)) < 0) {  
            perror("bind");  
            exit(1);  
        }  

        /* listen() */ 
        if (listen(s, 1000) < 0) {  
            perror("listen");  
            exit(1);  
        }  

        /* Initial libevent. */ 
        event_init();  

        /* Create event. */ 
        struct event ev;  
        event_set(&ev, s, EV_READ | EV_PERSIST, connection_accept, &ev);  

        /* Add event. */ 
        event_add(&ev, NULL);  

        event_dispatch();  

        return 0;  
    }
</code></pre>


<h2>erlang_test.erl</h2>

<p>In Eshell:</p>

<pre><code>1&gt;c(erlang_test).
2&gt;erlang_test:start().
</code></pre>

<pre><code>
    -module(erlang_test).
    -export([start/0]).

    start() ->
            {ok, Listen} = gen_tcp:listen(8000, [binary,
                                                    %{packet, 4},
                                                    {reuseaddr, true},
                                                    {backlog, 2000},
                                                    {active, true}]),
            spawn(fun() -> par_connect(Listen, 0) end).

    par_connect(Listen, Count) ->
            {ok, Socket} = gen_tcp:accept(Listen),
            New = Count + 1,
            io:format("Accept succ ~p~n", [New]),
            spawn(fun() -> par_connect(Listen, New) end),
            loop(Socket).


    loop(Socket) ->
        receive
            {tcp, Socket, Bin} ->
                gen_tcp:send(Socket, Bin),
                loop(Socket);
            {tcp_closed, Socket} ->
                io:format("Server socket closed~n")
        end.
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置阿里云服务器]]></title>
    <link href="http://lite.github.com/blog/2013/04/25/nodejs-on-aliyun/"/>
    <updated>2013-04-25T13:54:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/04/25/nodejs-on-aliyun</id>
    <content type="html"><![CDATA[<p>加载数据盘</p>

<pre>
fdisk /dev/xvdb
mkfs.ext3 /dev/xvdb1
echo '/dev/xvdb1  /mnt ext3    defaults    0  0' >> /etc/fstab
mount -a
</pre>


<p>使用yum安装所需包</p>

<pre>
sed -i "s/exclude=kernel*/#exclude=kernel*/g" /etc/yum.conf
yum update
yum install git gcc-c++ openssl-devel make
</pre>


<p>安装nodejs</p>

<pre>
wget -N http://nodejs.org/dist/node-latest.tar.gz
tar xzvf node-latest.tar.gz && cd `ls -rd node-v*`
./configure
make install
</pre>


<p>使用npm安装coffeescript和forever</p>

<pre>
npm install coffeescript
npm install forever
forever start -w app.js
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TPB AFK]]></title>
    <link href="http://lite.github.com/blog/2013/03/08/tpb-afk/"/>
    <updated>2013-03-08T02:12:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/03/08/tpb-afk</id>
    <content type="html"><![CDATA[<p>一部记录海盗湾的纪录片。有3125个用户付费下载，捐赠达到了45164美元，不包括DVD的收入。<a href="http://watch.tpbafk.tv/">“TPB APK”</a></p>

<p>使用CC-BY-NC-SA版权<a href="http://www.tpbafk.tv/2013/01/why-i-chose-creative-commons-for-tpb-afk/">原因</a></p>

<p>通过Kickstarter准备筹款25000美元，3天时间就筹到了，最终达到了51434美元<a href="http://www.tpbafk.tv/2010/10/51434-thank-yous/">51434-thank-yous</a></p>

<p>很好的一篇博文：<a href="http://www.ruanyifeng.com/blog/2013/02/tpb.html">纪录片《TPB AFK》与现行版权制度</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pureftpd 和 nxserver]]></title>
    <link href="http://lite.github.com/blog/2013/03/04/pureftpd-and-nxserver/"/>
    <updated>2013-03-04T18:57:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/03/04/pureftpd-and-nxserver</id>
    <content type="html"><![CDATA[<h2>配置pureftpd</h2>

<pre>
./configure --prefix=/usr/local/pureftpd --with-puredb 
make && make install
mkdir /usr/local/pureftpd/etc
groupadd ftpgroup
useradd -g ftpgroup -d /dev/null -s /etc ftpuser
cp configuration-file/pure-ftpd.conf /usr/loca/pureftpd/etc/
cp configuration-file/pure-config.pl /usr/loca/pureftpd/sbin/
chmod +x /usr/loca/pureftpd/sbin/pure-config.pl
/usr/local/pureftpd/bin/pure-pw useradd test -u ftpuser -d /data/ftp/
/usr/local/pureftpd/bin/pure-pw mkdb
</pre>


<p>修改&#8221;/usr/loca/pureftpd/etc/pure-ftpd.conf&#8221;的 PureDB</p>

<pre>
PureDB                    /usr/local/pureftpd/etc/pureftpd.pdb
PassivePortRange          30000 50000
</pre>


<p>在&#8221;/etc/sysconfig/SuSEfirewall2&#8221;中启用端口</p>

<pre>
FW_SERVICES_EXT_TCP="21 30000:50000"
</pre>


<p>重新加载防火墙配置</p>

<pre>
SuSEfirewall2
</pre>


<p>启动pureftpd</p>

<pre>
/usr/loca/pureftpd/sbin/pure-config.pl /usr/loca/pureftpd/etc/pure-ftpd.conf
</pre>


<h2>配置nxserver</h2>

<p>下载 <a href="http://www.nomachine.com/download.php">nxserver</a></p>

<p>添加用户</p>

<pre>
/usr/NX/bin/nxserver --useradd nxuser
</pre>


<p>nxclient 用户登录： &#8220;nxuser&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SUSE上安装nvidia驱动]]></title>
    <link href="http://lite.github.com/blog/2013/02/26/nvidia-and-opensuse-12-dot-2/"/>
    <updated>2013-02-26T22:59:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/02/26/nvidia-and-opensuse-12-dot-2</id>
    <content type="html"><![CDATA[<p>使用zypper安装包</p>

<pre>
zypper in kernel-devel 
zypper in kernel-desktop-devel
zypper in kernel-source
zypper in gcc
</pre>


<p>更新 /etc/modprobe.d/50-blacklist.conf</p>

<pre>
#blacklist nvidiafb
blacklist nouveau
</pre>


<p>安装 nvidia 驱动</p>

<pre>   
sudo sh ./NVIDIA.run
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables 和 JVM thread]]></title>
    <link href="http://lite.github.com/blog/2013/02/03/iptables-and-jvm-thread/"/>
    <updated>2013-02-03T13:12:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/02/03/iptables-and-jvm-thread</id>
    <content type="html"><![CDATA[<p><a href="http://www.dd-wrt.com/wiki/index.php/Iptables_command">Iptables</a></p>

<pre><code>iptables -L
iptables -F

iptables -I INPUT -p TCP -m multiport --dports 8001:8005 -j REJECT 
iptables -I INPUT -p TCP -m multiport --dports 8001:8005 -s 8.8.0.0/16 -j ACCEPT

iptables -I OUTPUT -p TCP -d 10.142.20.0/24 -j REJECT
</code></pre>

<p>[JVM thread limit]</p>

<pre><code>-Xms   intial java heap size
-Xmx   maximum java heap size
-Xss   the stack size for each thread

/proc/sys/kernel/pid_max
/proc/sys/kernel/thread-max
max_user_process（ulimit -u）
/proc/sys/vm/max_map_count
</code></pre>
]]></content>
  </entry>
  
</feed>
