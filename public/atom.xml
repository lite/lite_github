<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lite]]></title>
  <link href="http://lite.github.com/atom.xml" rel="self"/>
  <link href="http://lite.github.com/"/>
  <updated>2013-10-09T01:41:15+08:00</updated>
  <id>http://lite.github.com/</id>
  <author>
    <name><![CDATA[Lite]]></name>
    <email><![CDATA[litekok@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jenkins and gradle]]></title>
    <link href="http://lite.github.com/blog/2013/10/09/jenkins-and-gradle/"/>
    <updated>2013-10-09T01:08:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/10/09/jenkins-and-gradle</id>
    <content type="html"><![CDATA[<p>Install jenkins</p>

<pre>
sudo zypper addrepo http://pkg.jenkins-ci.org/opensuse/ jenkins
sudo zypper install jenkins
</pre>


<p>&#8220;Manage Jenkins&#8221;, &#8220;Manage Plugins&#8221;</p>

<p>&#8220;Advanced&#8221;, &#8220;Update Site&#8221;, Url is http://mirror.xmission.com/jenkins/updates/update-center.json, Install &#8220;Gradle Plugin&#8221;,  &#8220;Git Plugin&#8221;, &#8220;Post build task&#8221;, Install gradle 1.8 /var/lib/jenkins/tools/hudson.plugins.gradle.GradleInstallation/gradle-1.8</p>

<p>&#8220;New job&#8221;</p>

<p>&#8220;Source Code Management&#8221;, &#8220;git repo&#8221; is git@host:test.git, &#8220;Branches to build&#8221; is origin/develop. &#8220;Build&#8221;, &#8220;Invoke Gradle script&#8221;, &#8220;Task&#8221; is build and deploy</p>

<pre>
// /var/lib/jenkins/jobs/test/workspace/build.gradle
sourceCompatibility = 1.6
version = 1.0

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }

    dependencies {
        compile(
            'com.google.guava:guava:13.0.1',
            'log4j:log4j:1.2.17',
            // fileTree(dir: "${rootProject.projectDir}/lib", include: '*.jar')
        )
        testCompile(
            'junit:junit:4.10',
            'org.mockito:mockito-all:1.9.0',
        )
    }
}

project(':Server') {
    jar {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(
it) } }
        manifest { attributes 'Main-Class': 'main.java.StartServer' }
    }
    dependencies {
        compile(
            project(':ServerUtil'),
            files(
                '../Lib/jdom.jar',
            )

        )
    }
}

def jarProjects() {
    subprojects.findAll { project -> project.name != 'ServerUtil'}
}

task deploy(description: 'Copies the artifacts') {
    ext {
        distDir = file("dist")
    }
    doLast {
     jarProjects().each { project ->
            def jarDist = project.file("${distDir}/${project.name}")
            def confDist = project.file("${distDir}/${project.name}/config")
            def confDir = project.file("config")
            def jarDir = project.file("${project.buildDir}/libs")
            copy {
                from jarDir
                into jarDist
                include "*.jar"
            }
            copy{
                from confDir
                into confDist
            }
        }
    }
}
</pre>


<ul>
<li>Post-build Actions</li>
</ul>


<pre>
/bin/bash start.sh
</pre>




<pre>
# //var/lib/jenkins/jobs/test/workspace/start.sh
kill -9 `lsof -t -i :8081`
nohup java -jar Server.jar &
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wget JDK with cookie ]]></title>
    <link href="http://lite.github.com/blog/2013/09/29/wget-jdk-with-cookie/"/>
    <updated>2013-09-29T10:54:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/09/29/wget-jdk-with-cookie</id>
    <content type="html"><![CDATA[<p>&#8220;In order to download products from Oracle Technology Network you must agree to the OTN license terms&#8221;
You need a single cookie to bypass this:</p>

<pre>
Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F
</pre>


<ul>
<li>JDK7</li>
</ul>


<pre>
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F" http://download.oracle.com/otn-pub/java/jdk/7u25-b15/jdk-7u25-macosx-x64.dmg
</pre>


<ul>
<li>JDK6</li>
</ul>


<pre>
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F" http://download.oracle.com/otn-pub/java/jdk/6u45-b06/jdk-6u45-linux-i586-rpm.bin
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TexturePacker和Unity3D插件Tang]]></title>
    <link href="http://lite.github.com/blog/2013/08/23/texturepacker-and-tang-in-unity3d/"/>
    <updated>2013-08-23T23:13:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/08/23/texturepacker-and-tang-in-unity3d</id>
    <content type="html"><![CDATA[<p><a href="http://www.codeandweb.com">Code&#8217;n&#8217;Web</a>慷慨地赠送了一个license, 为了表示感谢，在此做强烈推荐。</p>

<p>TexturePacker是手机游戏开发中非常得力的工具,可以非常方便的把许多的图像资源合成一张大图,方便管理资源和提升性能,其中裁剪和旋转的功能非常实用。更详细请访问官方网站：<a href="http://www.codeandweb.com/texturepacker">TexturePacker</a></p>

<p>使用TexturePacker，可以在Unity3d加入自己的一些处理，让游戏的开发更加自动化。同事写了一个简单的Unity3D插件Tang。该插件参考了 <a href="http://u3d.as/content/wyrm-tale-games/orthello-2d-framework/1Z9">Orthello 2D Framework</a> 的部分做法，AtlasCocos2DParser类用于解析TexturePacker所生成的数据文件。其核心代码开放在 <a href="https://github.com/zhongzichang/tang">github</a>，欢迎大家试用，Fork或提交代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HCD社会创新工作坊]]></title>
    <link href="http://lite.github.com/blog/2013/07/26/hcd-workshop/"/>
    <updated>2013-07-26T00:54:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/07/26/hcd-workshop</id>
    <content type="html"><![CDATA[<p><a href="http://plusacumen.org/human-centered-design-for-social-innovation-course-materials/">Human-Centered Design for Social Innovation</a></p>

<p>选择一个挑战，Discover发散出大量信息，Ideate将信息分类聚合，发散出大量解决方案，Prototype聚合可行方案并制作原型。</p>

<h1>介绍</h1>

<ul>
<li>观察，发现社区的信息和要解决的问题，包括产品的资源及限制，人的感受和需求，系统节点等等。</li>
<li>构思，对各种信息的分析并设计解决方案，例如空间中人群如何交互，满足人的需求，系统中各节点的联系。</li>
<li>原型，快速建立原型，并持续改进。</li>
</ul>


<p>注：让每阶段的产出视觉化。</p>

<h1>观察</h1>

<ul>
<li>和社区中的人群面对面交流，观察情绪</li>
<li>询问专家，学习专业知识</li>
<li>深入场景，亲身感受</li>
<li>找到类似的场景，寻求灵感</li>
</ul>


<p>注：交流时请问开放式的问题。</p>

<h1>构思</h1>

<ul>
<li>分享“观察”中感人的故事和调查的信息。包括采访者的个人信息，有趣的故事，动机，遇到的阻碍，与环境的交互，以及下一次你会再问什么问题？其余队员在Post-it写下记忆最深刻的故事，构成被采访者的详细个人故事。</li>
<li>按主题分类。每人找5个最有趣的和深刻见解的故事作为重点，并从其余的Post-it里找出相关的证据，合并成3-5块, 并写上标题。</li>
<li>创建深刻见解的陈述，用简单的3条陈述解释主题为什么会是一个挑战，并和团队一起来为每个主题选出3条陈述。</li>
<li>创建HMW问题。选择最喜欢的3条陈述（每个主题1条），并把他们转换成HMW问题，和团队一起优化这些问题。</li>
<li>头脑风暴。头脑风暴的原则：先不要否定，鼓励疯狂的想法，在别人的想法上创造，不要跑离主题，轮流发言，可视化，数量越多越好。</li>
<li>选择最可行的想法。每人两票。一票选最有创意的，另一票是最可行的。</li>
</ul>


<h1>原型</h1>

<ul>
<li>为最棒的点子评分。根据excited, innovative和realistic，每项1-5分。</li>
<li>画出产品体验的不同阶段。比如用户如何获知该产品，开始购买，第一次使用，全家使用。</li>
<li>选择要设计的原型。写下每个体验阶段，需要回答的最重要问题以及如何测试。</li>
<li>开始原型设计。原型包括模型，mockup，角色扮演，diagram，story， 广告单。Be Creative，Have Fun，Design to get answer。</li>
<li>收集反馈。提供原型给用户，计划活动并收集反馈。反馈包括测试点，如第一印象, 参与情况，随时间变化的行为。活动形式可以为提供原型给用户，和用户对话并观察用户的真实行为。</li>
<li>原型迭代。对反馈做分类，评估相关性，排优先级，并对原型做迭代。</li>
</ul>


<h1>前进</h1>

<ul>
<li>迭代：解决其余问题。建立一个行动计划。查看前面的体验图来查看哪些问题已经有答案，而哪些仍然未知。列出要用的材料。计算需要的资金。标定合作者，并完成行动计划。</li>
<li>试验：小范围试用了解可行性。把想法带入市场去测试。画一个商业模式画布，目标顾客，价值主张，收入，渠道。决定什么需要测试，价格。顾客是否愿意付款，以及接受的付款方式，如预付费，分期还是订阅。团队是否同样期待产品的成功。客户留存，客户体验。选择一个启动计划，选择合伙人，建立初始团队，找到办公场所，设置开始的价格，建立品牌。</li>
<li>扩张：计划扩张策略。通过试验，产品对于客户是期望的，可行的，重要的，可以开始早期扩张，在这个阶段资本和资源都比较紧张，主要测试本地的合作伙伴，如果模式可行，进入特许经营，主要销售或授权给商户，他们付加盟费，使用你的品牌和想法，需要支持本地商户，可能会降低产品质量。最后是整合，集合企业，政府，公益组织来扩张你的产品，会支持本地商户或社区组织，依赖更多外部合作者的意愿和能力。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[六顶思考帽]]></title>
    <link href="http://lite.github.com/blog/2013/06/17/six-thinking-hats/"/>
    <updated>2013-06-17T00:02:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/06/17/six-thinking-hats</id>
    <content type="html"><![CDATA[<p>爱德华·德波诺提出了一些促进横向思维的方法</p>

<ul>
<li>对问题本身产生多种选择方案（类似于发散）；</li>
<li>打破定势，提出富有挑战性的假设；</li>
<li>对头脑中冒出的新主意不要急着做是非判断；</li>
<li>反向思考，用与已建立的模式完全相反的方式思维，以产生新的思想；</li>
<li>对他人的建议持开放态度，让一个人头脑中的主意刺激另一个人头脑里的东西，形成交叉刺激；</li>
<li>扩大接触面，寻求随机信息刺激，以获得有益的联想和启发（如到图书馆随便找本书翻翻；从事一些非专业工作等）等等。</li>
</ul>


<p>代表的思维方式</p>

<ul>
<li>红帽子代表感性直觉式的思维方式;以感觉与情绪做判断；【我感觉&#8230;】</li>
<li>白帽子代表中立客观式的思维方式;着重事实与资讯；【有什么情报或资讯？】</li>
<li>黄帽子代表乐观积极型的思维方式;事物的正面因素；【我们从中获得什么利益？】</li>
<li>黑帽子代表谨慎消极型的思维方式;着重事物的负面因素；【这是真的吗？】</li>
<li>绿帽子代表跳跃式创造性思维方式;代表创意性思考；【有什么其他不同的想法吗？】</li>
<li>蓝帽子代表冷静的逻辑性思维方式;冷静客观；【归纳的结论是&#8230;具体做法是&#8230;】</li>
</ul>


<p>两种使用方法</p>

<ul>
<li><p>平行思维法：</p>

<p>  每个人戴自己的帽子按照自己习惯进行头脑风暴，也可任何指派角色。头脑风暴发起人自己必须戴蓝帽子</p></li>
<li><p>转换思维法：</p>

<p>  每个人都戴红色（找商业机会），再换白色（搜集信息论证）；再黄色（分析利益）；再黑色（分析风险），再绿色（建设性方案），最后再蓝色（逻辑性综合判断）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodejs, C libevent and erlang]]></title>
    <link href="http://lite.github.com/blog/2013/05/16/erlang-kernel-poll/"/>
    <updated>2013-05-16T00:41:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/05/16/erlang-kernel-poll</id>
    <content type="html"><![CDATA[<p>nodejs &lt; libevent &lt; erlang</p>

<pre><code>node.js:  connect=10000,active connect=100,req=1378370,time=60,req/sec=22972.8,msec/req=4.35543
libevent: connect=10000,active connect=100,req=3719106,time=60,req/sec=61985.1,msec/req=1.61258
erlang:   connect=10000,active connect=100,req=6377574,time=60,req/sec=106293,msec/req=0.939882
</code></pre>

<h2>node_test.js</h2>

<pre><code>
    var net = require('net');
    var cnt = 0;
    var server = net.createServer(function (socket) {
      socket.pipe(socket);
    });

    server.listen(8000, "127.0.0.1");
</code></pre>


<h2>libevent_test.c</h2>

<pre><code>
    #include < stdlib.h>
    #include < unistd.h>
    #include < netinet/in.h>  
    #include < sys/socket.h>  
    #include < sys/types.h>  
    #include < sys/socket.h>
    #include < event.h>  
    #include < stdio.h>  
    #include < time.h> 
    #include < string.h>
    #include < fcntl.h>

    int buf_len = 2048;
    int msg_len = 1024; 
    int total = 0;

    int setnonblock(int fd)
    {       
        int flags;       
        flags = fcntl(fd, F_GETFL);       
        if (flags < 0)               
            return flags;       
        flags |= O_NONBLOCK;       
        if (fcntl(fd, F_SETFL, flags) < 0)               
            return -1;       
     
        return 0;
    }

    void connection_echo(int fd, short event, void *arg)
    {
        struct event *ev = (struct event *)arg;
        event_add(ev, NULL);

        char buf[buf_len];
        int read_len = read(fd, buf, msg_len);
        write(fd, buf, read_len);
    }

    void connection_accept(int fd, short event, void *arg)   
    { 
        /* for debugging */ 
        fprintf(stderr, "%s(): fd = %d, event = %d, total = %d.\n", __func__, fd, event, ++total);  

        /* Accept a new connection. */ 
        struct sockaddr_in s_in;  
        socklen_t len = sizeof(s_in);  
        int ns = accept(fd, (struct sockaddr *) &s_in, &len);  
        if (ns < 0) {  
            perror("accept");  
            return;  
        }  

        setnonblock(ns);

        /* Install echo server. */ 
        struct event *ev = (struct event *)malloc(sizeof(struct event));  
        event_set(ev, ns, EV_READ, connection_echo, ev);  
        event_add(ev, NULL);  
    } 

    int main(void)  
    {  
        /* Request socket. */ 
        int s = socket(PF_INET, SOCK_STREAM, 0);  
        if (s < 0) {  
            perror("socket");  
            exit(1);  
        }  

        /* bind() */ 
        struct sockaddr_in s_in;  
        memset(&s_in, 0, sizeof(s_in));  
        s_in.sin_family = AF_INET;  
        s_in.sin_port = htons(8000);  
        s_in.sin_addr.s_addr = INADDR_ANY;  
        if (bind(s, (struct sockaddr *) &s_in, sizeof(s_in)) < 0) {  
            perror("bind");  
            exit(1);  
        }  

        /* listen() */ 
        if (listen(s, 1000) < 0) {  
            perror("listen");  
            exit(1);  
        }  

        /* Initial libevent. */ 
        event_init();  

        /* Create event. */ 
        struct event ev;  
        event_set(&ev, s, EV_READ | EV_PERSIST, connection_accept, &ev);  

        /* Add event. */ 
        event_add(&ev, NULL);  

        event_dispatch();  

        return 0;  
    }
</code></pre>


<h2>erlang_test.erl</h2>

<p>In Eshell:</p>

<pre><code>1&gt;c(erlang_test).
2&gt;erlang_test:start().
</code></pre>

<pre><code>
    -module(erlang_test).
    -export([start/0]).

    start() ->
            {ok, Listen} = gen_tcp:listen(8000, [binary,
                                                    %{packet, 4},
                                                    {reuseaddr, true},
                                                    {backlog, 2000},
                                                    {active, true}]),
            spawn(fun() -> par_connect(Listen, 0) end).

    par_connect(Listen, Count) ->
            {ok, Socket} = gen_tcp:accept(Listen),
            New = Count + 1,
            io:format("Accept succ ~p~n", [New]),
            spawn(fun() -> par_connect(Listen, New) end),
            loop(Socket).


    loop(Socket) ->
        receive
            {tcp, Socket, Bin} ->
                gen_tcp:send(Socket, Bin),
                loop(Socket);
            {tcp_closed, Socket} ->
                io:format("Server socket closed~n")
        end.
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodejs on aliyun]]></title>
    <link href="http://lite.github.com/blog/2013/04/25/nodejs-on-aliyun/"/>
    <updated>2013-04-25T13:54:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/04/25/nodejs-on-aliyun</id>
    <content type="html"><![CDATA[<p>Mount the data disk</p>

<pre><code>fdisk /dev/xvdb
mkfs.ext3 /dev/xvdb1
echo '/dev/xvdb1  /mnt ext3    defaults    0  0' &gt;&gt; /etc/fstab
mount -a
</code></pre>

<p>Install the requirements by yum</p>

<pre><code>sed -i "s/exclude=kernel*/#exclude=kernel*/g" /etc/yum.conf
yum update
yum install git gcc-c++ openssl-devel make
</code></pre>

<p>Install nodejs</p>

<pre><code>wget -N http://nodejs.org/dist/node-latest.tar.gz
tar xzvf node-latest.tar.gz &amp;&amp; cd `ls -rd node-v*`
./configure
make install
</code></pre>

<p>Install coffeescript and forever by npm</p>

<pre><code>npm install coffeescript
npm install forever
forever start -w app.js
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TPB AFK]]></title>
    <link href="http://lite.github.com/blog/2013/03/08/tpb-afk/"/>
    <updated>2013-03-08T02:12:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/03/08/tpb-afk</id>
    <content type="html"><![CDATA[<p>一部记录海盗湾的纪录片。有3125个用户付费下载，捐赠达到了45164美元，不包括DVD的收入。<a href="http://watch.tpbafk.tv/">“TPB APK”</a></p>

<p>使用CC-BY-NC-SA版权<a href="http://www.tpbafk.tv/2013/01/why-i-chose-creative-commons-for-tpb-afk/">原因</a></p>

<p>通过Kickstarter准备筹款25000美元，3天时间就筹到了，最终达到了51434美元<a href="http://www.tpbafk.tv/2010/10/51434-thank-yous/">51434-thank-yous</a></p>

<p>很好的一篇博文：<a href="http://www.ruanyifeng.com/blog/2013/02/tpb.html">纪录片《TPB AFK》与现行版权制度</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pureftpd and nxserver]]></title>
    <link href="http://lite.github.com/blog/2013/03/04/pureftpd-and-nxserver/"/>
    <updated>2013-03-04T18:57:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/03/04/pureftpd-and-nxserver</id>
    <content type="html"><![CDATA[<h2>pureftpd</h2>

<pre><code>./configure --prefix=/usr/local/pureftpd --with-puredb 
make &amp;&amp; make install
mkdir /usr/local/pureftpd/etc
groupadd ftpgroup
useradd -g ftpgroup -d /dev/null -s /etc ftpuser
cp configuration-file/pure-ftpd.conf /usr/loca/pureftpd/etc/
cp configuration-file/pure-config.pl /usr/loca/pureftpd/sbin/
chmod +x /usr/loca/pureftpd/sbin/pure-config.pl
/usr/local/pureftpd/bin/pure-pw useradd test -u ftpuser -d /data/ftp/
/usr/local/pureftpd/bin/pure-pw mkdb
</code></pre>

<p>Modify PureDB in &#8220;/usr/loca/pureftpd/etc/pure-ftpd.conf&#8221;</p>

<pre><code>PureDB                    /usr/local/pureftpd/etc/pureftpd.pdb
PassivePortRange          30000 50000
</code></pre>

<p>Enable port in &#8220;/etc/sysconfig/SuSEfirewall2&#8221;</p>

<pre><code>FW_SERVICES_EXT_TCP="21 30000:50000"
</code></pre>

<p>Reload firewall config</p>

<pre><code>SuSEfirewall2
</code></pre>

<p>Startalone pureftpd</p>

<pre><code>/usr/loca/pureftpd/sbin/pure-config.pl /usr/loca/pureftpd/etc/pure-ftpd.conf
</code></pre>

<h2>nxserver</h2>

<p>Download <a href="http://www.nomachine.com/download.php">nxserver</a></p>

<p>Add user</p>

<pre><code>/usr/NX/bin/nxserver --useradd nxuser
</code></pre>

<p>nxclient login as a normal user &#8220;nxuser&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvidia and openSUSE 12.2]]></title>
    <link href="http://lite.github.com/blog/2013/02/26/nvidia-and-opensuse-12-dot-2/"/>
    <updated>2013-02-26T22:59:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/02/26/nvidia-and-opensuse-12-dot-2</id>
    <content type="html"><![CDATA[<p>Install these packages by zypper</p>

<pre><code>zypper in kernel-devel 
zypper in kernel-desktop-devel
zypper in kernel-source
zypper in gcc
</code></pre>

<p>Update /etc/modprobe.d/50-blacklist.conf</p>

<pre><code>#blacklist nvidiafb
blacklist nouveau
</code></pre>

<p>Install nvidia driver</p>

<pre><code>sudo sh ./NVIDIA.run
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables and JVM thread]]></title>
    <link href="http://lite.github.com/blog/2013/02/03/iptables-and-jvm-thread/"/>
    <updated>2013-02-03T13:12:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/02/03/iptables-and-jvm-thread</id>
    <content type="html"><![CDATA[<p><a href="http://www.dd-wrt.com/wiki/index.php/Iptables_command">Iptables</a></p>

<pre><code>iptables -L
iptables -F

iptables -I INPUT -p TCP -m multiport --dports 8001:8005 -j REJECT 
iptables -I INPUT -p TCP -m multiport --dports 8001:8005 -s 8.8.0.0/16 -j ACCEPT

iptables -I OUTPUT -p TCP -d 10.142.20.0/24 -j REJECT
</code></pre>

<p>[JVM thread limit]</p>

<pre><code>-Xms   intial java heap size
-Xmx   maximum java heap size
-Xss   the stack size for each thread

/proc/sys/kernel/pid_max
/proc/sys/kernel/thread-max
max_user_process（ulimit -u）
/proc/sys/vm/max_map_count
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thin with rvm as a system service]]></title>
    <link href="http://lite.github.com/blog/2013/01/29/thin-with-rvm-as-a-system-service/"/>
    <updated>2013-01-29T22:04:00+08:00</updated>
    <id>http://lite.github.com/blog/2013/01/29/thin-with-rvm-as-a-system-service</id>
    <content type="html"><![CDATA[<p>Install thin to /etc/init.d/thin</p>

<pre><code>rvm wrapper ruby-1.9.2-p125 bootup thin
sudo  ~/.rvm/bin/bootup_thin install
</code></pre>

<p>Edit DAEMON in /etc/init.d/thin</p>

<pre><code>DAEMON=/usr/local/bin/bootup_thin
</code></pre>

<p>Enable thin system service at runlevel 3 and 5</p>

<pre><code>sudo /sbin/chkconfig -s thin 35
</code></pre>

<p>Edit /etc/thin/thin.yml</p>

<pre><code>pid: tmp/pids/thin.pid
wait: 30
port: 8000
timeout: 30
log: log/thin.log
max_conns: 1024
require: []
environment: production
max_persistent_conns: 512
daemonize: true
servers: 3
socket: /tmp/thin.sock
chdir: /home/dli/dth/redmine
</code></pre>

<p>Start service thin</p>

<pre><code>sudo /sbin/service thin start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QQwry and Nginx]]></title>
    <link href="http://lite.github.com/blog/2012/12/25/qqwry-and-nginx/"/>
    <updated>2012-12-25T14:50:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/12/25/qqwry-and-nginx</id>
    <content type="html"><![CDATA[<p>clone the modules from github</p>

<pre><code>git clone git://github.com/anjuke/ngx_http_qqwry_module.git
git clone git://github.com/agentzh/echo-nginx-module.git
</code></pre>

<p>compile nginx</p>

<pre><code>./configure --with-debug --add-module=./ngx_http_qqwry_module/ --add-module=./echo-nginx-module/
make
</code></pre>

<p>download <a href="http://update.cz88.net/soft/qqwry.rar">qqwry</a>
convert qqwry.dat.gbk to qqwry.dat(utf8), and copy to nginx/conf folder.</p>

<pre><code>python qqwry_iconv.py
</code></pre>

<p>edit nginx.conf</p>

<pre><code>http {
    qqwry $remote_addr $qqwry_loc /conf/qqwry.dat;

    server {
        charset utf-8;

        location /hello {
            echo $remote_addr;
            echo $qqwry_loc; 
            if ($qqwry_loc ~ "浙江省北京市四川省成都市"){
                echo "hello";
            }
        }
    }
}
</code></pre>

<p>start nginx</p>

<pre><code>objs/nginx -c conf/nginx.conf
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run your own Git server with Gitolite and Amazon EC2]]></title>
    <link href="http://lite.github.com/blog/2012/12/06/gitolite-and-ec2/"/>
    <updated>2012-12-06T16:57:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/12/06/gitolite-and-ec2</id>
    <content type="html"><![CDATA[<p><a href="http://edvanbeinum.com/run-your-own-git-server-with-gitolite-and-amazon-ec2">Run your own Git server with Gitolite and Amazon EC2</a></p>

<p>Create user</p>

<pre><code>useradd git -g wheel --create-home --shell /usr/bin/git-shell
</code></pre>

<p>AllowUsers git in sshd_config</p>

<p>Install gitolite</p>

<pre><code>sudo yum -y install perl-CPAN perl-Time-HiRes

perl -MCPAN -e shell
    o conf urllist http://cpan.yahoo.com/
    o conf commit
    install CPAN
    reload cpan

git clone git://github.com/sitaramc/gitolite
mkdir -p $HOME/bin
gitolite/install -to $HOME/bin
bin/gitolite setup -pk YourName.pub
</code></pre>

<p>Testing git by ssh</p>

<pre><code>ssh -i dli.pem ec2-user@aws
ssh -Nqf -D 7070 -i dli.pem ec2-user@aws
git clone aws:gitolite-admin.git
git clone aws:testing.git
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[captcha]]></title>
    <link href="http://lite.github.com/blog/2012/11/15/captcha/"/>
    <updated>2012-11-15T11:15:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/11/15/captcha</id>
    <content type="html"><![CDATA[<p>Captcha = Completely Automated Public Turing Test to Tell Computers and Humans Apart</p>

<p>二值化 + 去干扰线 + 去噪 + 分割 + 旋转 + 识别
中值滤镜 + PCA</p>

<ul>
<li><a href="http://code.google.com/p/tesseract-ocr/">tesseract-ocr</a></li>
<li><a href="http://www.80vul.com/webzine_0x02/PSTZine_0x02_0x09.html">如何识别高级的验证码</a></li>
<li><a href="http://1.identify.sinaapp.com/?p=8">二维物体形状识别方法比较</a></li>
<li><a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/shape/">Recognition:Objects, Humans, Activities</a></li>
<li><a href="http://caca.zoy.org/wiki/PWNtcha">Pwntcha</a></li>
<li><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/table_of_content_imgproc/table_of_content_imgproc.html">OpenCV</a></li>
<li><a href="http://blog.pluskid.org/wp-content/uploads/2010/01/captcha_src.zip">简单验证码的识别</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svnserve on SuSE]]></title>
    <link href="http://lite.github.com/blog/2012/11/02/svnserve-on-suse/"/>
    <updated>2012-11-02T21:10:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/11/02/svnserve-on-suse</id>
    <content type="html"><![CDATA[<p>Create the repos</p>

<pre><code>groupadd svn; useradd -d /srv/svn -s /bin/false -g svn svn
</code></pre>

<p>Enable 3690 port /etc/sysconfig/SuSEfirewall2</p>

<pre><code>FW_SERVICES_EXT_TCP="22 80 3306 3690"
</code></pre>

<p>Create the repos</p>

<pre><code>svnadmin create /srv/svn/repos
</code></pre>

<p>Configuration</p>

<pre><code>;/srv/svn/repos/conf/svnserve.conf   
[general]
anon-access = none
auth-access = write
password-db = passwd

;/srv/svn/repos/conf/passwd
[users]
test = test

;/etc/sysconfig/svnserve
;The -R option enforces read-only access
SVNSERVE_OPTIONS="-d -r /srv/svn/repos"
</code></pre>

<p>Start svnserve</p>

<pre><code>chown -R svn:svn /srv/svn/
chmod -R 755 /srv/svn/
chkconfig svnserve
service svnserve start
</code></pre>

<p>On svn client working</p>

<pre><code>svn co --username test svn://192.168.1.21/ my-repos
svn up
svn merge ./ -r 5:4 
svn st
svn commit -m "rollback to r4"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gzip on nginx]]></title>
    <link href="http://lite.github.com/blog/2012/10/15/gzip-on-nginx/"/>
    <updated>2012-10-15T22:44:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/10/15/gzip-on-nginx</id>
    <content type="html"><![CDATA[<p>add gzip support in conf/nginx.conf</p>

<pre><code>gzip            on;
gzip_comp_level 5;
gzip_min_length 1024;
gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/jpeg image/gif image/png;
gzip_proxied    expired no-cache no-store private auth;
gzip_disable    "MSIE [1-6]\.";
</code></pre>

<p>reload nginx</p>

<pre><code>sbin/nginx -s reload
</code></pre>

<p>test by curl</p>

<pre><code>curl -I --compressed http://fssle.com/8/config/txt/task.xml
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[programmers-quotes]]></title>
    <link href="http://lite.github.com/blog/2012/10/02/programmers-quotes/"/>
    <updated>2012-10-02T23:30:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/10/02/programmers-quotes</id>
    <content type="html"><![CDATA[<ul>
<li>Life’s too short to build something nobody wants – Ash Maurya, Running Lean</li>
<li>Give someone a program, you frustrate them for a day; teach them how to program, you frustrate them for a lifetime. – David Leinweber</li>
<li>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies. — C.A.R. Hoare</li>
<li>Actually, I’m trying to make Ruby natural, not simple. Ruby is simple in appearance, but is very complex inside, just like our human body. – Matz, Ruby</li>
<li>Much of the essence of building a program is in fact the debugging of the specification. – Fred Brooks, The Mythical Man-Month</li>
<li>The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time. – Tom Cargill</li>
<li>Complication is What Happens When You Try to Solve a Problem You Don’t Understand – Andy Boothe</li>
<li>Weeks of programming can save you hours of planning. – Unknown</li>
<li>Controlling complexity is the essence of computer programming. — Brian Kernighan</li>
<li>All problems in computer science can be solved by another level of indirection(abstraction) – David Wheeler</li>
<li>…except for the problem of too many layers of indirection. – Kevlin Henney’s corollary</li>
<li>Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning. — Rick Cook</li>
<li>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it. — Brian W. Kernighan</li>
<li>I’m not a great programmer; I’m just a good programmer with great habits. ― Kent Beck</li>
<li>Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris. – Larry Wall, Perl</li>
<li>Any fool can write code that a computer can understand. Good programmers write code that humans can understand. – Martin Fowler</li>
<li>Measuring programming progress by lines of code is like measuring aircraft building progress by weight. – Bill Gates</li>
<li>It’s not a bug – it’s an undocumented feature. – Unknown</li>
<li>The most depressing thing about life as a programmer, I think, is if you’re faced with a chunk of code that either someone else wrote or, worse still, you wrote yourself but you no longer dare to modify. That’s depressing. – Peyton Jones</li>
<li>It works on my machine! – Most of programmers</li>
<li>Talk is cheap. Show me the code. – Linus Torvalds</li>
<li>I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages — Alan Kay, Smalltalk</li>
<li>When you choose a language, you’re choosing more than a set of technical trade-offs—you’re choosing a community. -Joshua Bloch</li>
<li>Quality, Speed or Cheap. Pick two. – Unknown</li>
<li>Developer testing isn’t primarily about verifying code. It’s about making great code. If you can’t test something, it might be your testing skills failing you but it’s probably your code code’s design. Testable code is almost always better code. – Chad Fowler</li>
<li>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. – Donald Knuth</li>
<li>No code is faster than no code. – Merb core tenet</li>
<li>If you’re the smartest person in the room, you’re in the wrong room. – Unknown</li>
<li>How long would it take your organization to deploy a change (to production) that involves just one single line of code? Do you do this on a repeatable, reliable basis? – Mary Poppendieck</li>
<li>Nine people can’t make a baby in a month.  — Fred Brooks, The Mythical Man-Month</li>
<li>Good code is its own best documentation. As you’re about to add a comment, ask yourself, ‘How can I improve the code so that this comment isn’t needed?’ Improve the code and then document it to make it even clearer. – Steve McConnell, Code Complete</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[expect-split-and-tcpdump]]></title>
    <link href="http://lite.github.com/blog/2012/08/28/expect-split-and-tcpdump/"/>
    <updated>2012-08-28T20:25:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/08/28/expect-split-and-tcpdump</id>
    <content type="html"><![CDATA[<h1><a href="http://danielmiessler.com/study/tcpdump/">tcpdump</a></h1>

<pre><code>tcpdump -x -vv  -i any "tcp port 8001"
tcpdump -X -vv -s 4096  -w portrange.cap 'portrange 8001-8005'
tcpdump -X -vv -s 4096  -w ip.cap -i any 'src 8.8.8.8 or dst 6.6.6.6'
tcpdump -r host.cap -XX -s 4096 &gt; host.cap.txt  
</code></pre>

<h1>expect</h1>

<p>ssh_config:</p>

<pre><code>host test
    user app100642705
    hostname 10.1.2.15 
    port 3322
    identityfile pkey
</code></pre>

<p>myshell.sh:</p>

<pre><code>#!/usr/bin/expect -f
spawn ssh -F ssh_config test
expect "*(yes/no)?" {
    send "yes\r"
}
interact #expect eof
</code></pre>

<h1>split</h1>

<pre><code>tar -czvf - test | split -b 50m - test.tar.gz
cat test.tar.gz.a* &gt; - | tar -zxvf - 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew tap]]></title>
    <link href="http://lite.github.com/blog/2012/08/08/brew-tap/"/>
    <updated>2012-08-08T22:23:00+08:00</updated>
    <id>http://lite.github.com/blog/2012/08/08/brew-tap</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mxcl/homebrew/wiki/Interesting-Taps-%26-Branches">Interesting Taps &amp; Branches</a></p>

<pre><code>brew tap larsimmisch/avr
brew install avr-libc
</code></pre>

<p>install proxychains(or tsocks)</p>

<pre><code>brew tap lite/alt
brew install proxychains
</code></pre>

<p>curl lcms when installing imagemagick</p>

<pre><code>brew edit lcms
url 'http://www.littlecms.com/1/lcms-1.19.tar.gz'

brew edit imagemagick
url 'http://studio.imagemagick.net/download/ImageMagick-6.7.8-8.tar.bz2'

git push git@github.com:lite/homebrew.git
brew install imagemagick
</code></pre>
]]></content>
  </entry>
  
</feed>
